Definition der O-Notation
	*𝑓 ∈ 𝒪(𝑔) ⇔ ∃ c>0, n₀ ∈ ℕ ∀ n>n₀: 𝑓(n) ≤ c·𝑔(n).
	𝑓 ∈ 𝒪(𝑔) ⇔ ∀ c>0 ∃ n₀ ∀ n>n₀: 𝑓(n) ≥ c·𝑔(n).
	*Es gibt Konstanten c, n₀, sodass ab n₀ gilt 𝑓(n) ≤ c·𝑔(n).
	𝑓 ∈ 𝒪(𝑔) ⇔ 𝑓(n)/𝑔(n) → ∞ für n→∞.

Zeitkostenfunktion einer TM M
	*𝐾ₘ(w) ist die Anzahl der Schritte, bis M auf Eingabe w terminiert.
	𝐾ₘ(n) = max{|w|=n} Länge des Bandinhalts.
	*Die Zeitkomplexität fₘ(n) = max\{𝐾ₘ(w) ∣ |w|=n\}.
	𝐾ₘ(w) misst die Anzahl der Zustände, die M durchläuft.
	*Die Zeitkomplexität wird anhand der schnellst möglichen TM gemessen.

Simulationsaufwand nichtdeterministischer TMs
	*Eine k-Band-NTM mit Laufzeit fₙ(n) lässt sich durch eine 1-Band-TM mit Laufzeit 2^O(fₙ(n)) simulieren.
	NTM-Laufzeit fₙ(n) wird ohne Overhead übernommen.
	Simulation einer NTM erfordert niemals mehr als fₙ(n) Schritte.



Definition der Klasse P
	*P = ⋃_k≥1 TIME(nᵏ), Sprachen die eine deterministische 1-Band-TM in polynomieller Zeit entscheidet.
	P = ⋂_k≥1 TIME(nᵏ).
	*P ist unabhängig von Wahl der Maschine (1-Band, k-Band, RAM).
	P = EXP.

Eigenschaften von P
	*Jede Sprache in P ist auch in NP (P ⊆ NP).
	*Es ist offen, ob P = NP.
	*Algorithmen in P haben für n≈300 praktisch endliche Laufzeit, selbst für hohe Polynome.
	Es gibt Probleme in P, die exponentiell viele Schritte benötigen.

Beispiel PATH
	*PATH = {(G,s,t) ∣ in G gibt es einen Pfad von s nach t} ∈ P.
	PATH ∉ P, da es n^n Knoten-Kombinationen gibt.
	*Eine BFS/DFS-Implementierung auf Turingmaschine läuft in O(n³).
	PATH ist NP-vollständig.



Verifizierer-Charakterisierung von NP
	*NP = {A ∣ ∃ Verifizierer V, w∈A ⇔ ∃ c: V akzeptiert (w,c) in poly. Zeit}.
	NP = TIME(nᵏ) für k>1.
	*NP = ⋃_k≥1 NTIME(nᵏ).
	NTIME(nᵏ) ⊆ P.

Beispiele in NP
	*HAMPATH = {(G,s,t) ∣ G enthält Hamilton-Pfad von s nach t} ∈ NP.
	*PATH ∈ NP.
	*SAT und 3SAT ∈ NP.
	*Graph-Clique ∈ NP.

Welche Aussage ist falsch?
	P ⊆ NP.
	NP ⊆ EXP.
	*NP ⊆ P.
	P ⊂ EXP.



Polynomzeit-Reduktion A ≼ₚ B bedeutet …
	*A ist auf B reduzierbar, wenn f berechenbar in poly. Zeit und w∈A ⇔ f(w)∈B.
	|w| = |f(w)| für alle w∈Σ*.
	*Transitivität: A ≼ₚ B und B ≼ₚ C ⇒ A ≼ₚ C.
	A und B müssen das gleiche Alphabet Σ haben.

NP-Schwere und NP-Vollständigkeit
	*B NP-hart ⇔ ∀A∈NP: A ≼ₚ B.
	*B NP-vollständig ⇔ B∈NP und B NP-hart.
	*B NP-vollständig und B∈P ⇒ P=NP.
	NP-harte Probleme sind immer entscheidbar.

Satz von Cook-Levin
	*SAT ist NP-vollständig.
	3SAT ∈ P.
	*Jede Sprache in NP lässt sich in poly. Zeit auf SAT reduzieren.

Wählen Sie die NP‐vollständigen Probleme aus:
	*SAT
	*CLIQUE
	*Hamilton-Pfad
	PATH
	Halteproblem

Konsequenzen korollar 3.4.7
	*Ist B NP-schwer, B ≼ₚ C und C∈NP, so ist C NP-vollständig.
	*NP-Schwere überträgt sich durch Reduktion.
	*Transitivität von ≼ₚ hält die NP-Schwere
	Jede Sprache in NP ist NP-vollständig.



Beziehungsdiagramm P, NP, EXP
	*P ⊆ NP
	*NP ⊆ EXP
	P ⊆ EXP
	NP ⊆ P.
	NP = EXP.

Welche Aussage trifft zu?
	*Falls SAT∈P, folgt P=NP.
	*Falls P=NP, folgt NP≠EXP.

Abschätzungen
	*Eine 2-Band-TM kann eine quadratische-Zeit-TM auf O(n) beschleunigen.
	*Eine k-Band-Simulation verursacht höchstens polynomialen Overhead.
	Simulation einer Multi-Band-TM auf 1-Band verliert nicht mehr als log-Faktor.

Verifikation vs. Entscheidung
	*Jeder Algorithmus in P kann als NP-Verifizierer für sich selbst dienen.
	Verifizieren (NP) ist stets schwieriger als eine Lösung zu finden.
	*Ein Verifizierer V akzeptiert (w,c) genau dann, wenn c ein gültiges Zertifikat für w ist.

Single‐Choice zur Simulation; Eine NTM mit Laufzeit f(n) lässt sich simulieren durch:
	Ein-Band-TM mit Laufzeit O(f(n)).
	*Ein-Band-TM mit Laufzeit 2^O(f(n)).